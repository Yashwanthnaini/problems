class AutoCompleteSystem {
    String search = "";
    List<SearchQuery> availableSearches = new ArrayList<>();
    
    public class SearchQuery implements Comparable<SearchQuery>{
        public String sentence = "";
        public int times = 0;
        
        public SearchQuery(String sentence, int times){
            this.sentence = sentence;
            this.times = times;
        }
        
        public void incrementTimes(){
            this.times++;
        }
        
         @Override
        public int compareTo(SearchQuery o) {
            if (this.times != o.times) {
                return o.times - this.times;
            }
            int minLength = Math.min(this.sentence.length(), o.sentence.length());
            for (int i = 0; i < minLength; i++) {
                if (this.sentence.charAt(i) != o.sentence.charAt(i)) {
                    return this.sentence.charAt(i) - o.sentence.charAt(i);
                }
            }
            return this.sentence.length() - o.sentence.length();
        }
    }
    
    
    public AutoCompleteSystem(String sentences[], int times[]) {
        for(int i=0; i< sentences.length; i++){
            String sentence = sentences[i];
            int time = times[i];
            availableSearches.add(new SearchQuery(sentence, time));
        }
    }

    ArrayList<String> input(char c) {
         ArrayList<String> returningList = new ArrayList<>();
        if (c == '#') {
            boolean found = false;
            for (SearchQuery searchQ : availableSearches) {
                if (searchQ.sentence.equals(this.search)) {
                    searchQ.incrementTimes();
                    found = true;
                    break;
                }
            }
            if (!found) {
                availableSearches.add(new SearchQuery(this.search, 1));
            }
            this.search = "";
            return returningList;
        }
        search += c;
        PriorityQueue<SearchQuery> queue = new PriorityQueue<>();
        for (SearchQuery searchQ : availableSearches) {
            String sentence = searchQ.sentence;
            if (sentence.startsWith(search) && sentence.length() >= search.length() ) {
                     queue.add(searchQ);
            }
        }
        int count = 0;
        while (!queue.isEmpty() && count < 3) {
            returningList.add(queue.poll().sentence);
            count++;
        }
        return returningList;
    }
}
